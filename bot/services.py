from .models import *
from pprint import pprint

# File with SDK telegram by https://github.com/Apachel33t
from .utils import *
# File with messages in different languages for all user (super user, admins, common users, payment users)
from .messages_for_user import *
# File with buttons in different languages
from bot.keyboards.ru_keyboards import *
from bot.keyboards.en_keyboards import *
# File with all kinds of choices in different languages


# Main class which processes webhook from api.telegram.org/bot
class TelegramBot:

    @staticmethod
    def send_input_error_message(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, '–¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        else:
            en_error_message(chat_object, 'data entered incorrectly.')

    @staticmethod
    def send_success_message(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_success_message(chat_object)
        else:
            en_success_message(chat_object)

    @staticmethod
    def send_error_cannot_delete_project(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.')
        else:
            en_error_message(chat_object, "You cannot delete with project.")

    @staticmethod
    def send_edit_keyboard(chat_object, msg):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_decline_keyboard, chat_object.from_id, f'–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–∂–º–∏—Ç–µ üîô –ù–∞–∑–∞–¥.\n{msg}')
        else:
            send_keyboard(en_decline_keyboard, chat_object.from_id, f'To decline this action press üîô Back to.\n{msg}')

    @staticmethod
    def let_users_choose_role(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_role_keyboard, chat_object.from_id, '–í—ã–±–µ—Ä–µ—Ç–µ —Ä–æ–ª—å.')
        else:
            send_keyboard(en_role_keyboard, chat_object.from_id, 'Select role.')

    @staticmethod
    def send_his_profile(chat_object):
        user = User.objects.get(external_id=chat_object.from_id)
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_user_profile_keyboard, chat_object.from_id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å.')
            ru_send_user_profile(chat_object, user)
        else:
            send_keyboard(en_user_profile_keyboard, chat_object.from_id, 'Your profile.')
            en_send_user_profile(chat_object, user)

    @staticmethod
    def send_create_task_keyboard(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_create_project_keyboard, chat_object.from_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
        else:
            send_keyboard(en_create_project_keyboard, chat_object.from_id, 'Enter title of project')

    @staticmethod
    def send_enter_description_keyboard(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_create_project_keyboard, chat_object.from_id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
        else:
            send_keyboard(en_create_project_keyboard, chat_object.from_id, 'Enter description of project')

    @staticmethod
    def send_accept_create_project(chat_object, client):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_send_project_for_accept(chat_object, client)
            send_keyboard(ru_accept_send_data_withdraw_keyboard, chat_object.from_id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
        else:
            en_send_project_for_accept(chat_object, client)
            send_keyboard(en_accept_send_data_withdraw_keyboard, chat_object.from_id, 'Select.')

    @staticmethod
    def send_error_cost_incorrect(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, '—Ü–µ–Ω–∞ –∑–∞ –ø—Ä–æ–µ–∫—Ç –æ—Ç 101 –¥–æ 999 999 —Ä—É–±–ª–µ–π.')
        else:
            en_error_message(chat_object, 'cost project range at 101 to 999 999 rub.')

    @staticmethod
    def send_attach_file_keyboard(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_attach_file_keyboard, chat_object.from_id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.')
        else:
            send_keyboard(en_attach_file_keyboard, chat_object.from_id, 'Attach any file or image like document.')

    @staticmethod
    def send_enter_cost_keyboard(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_create_project_keyboard, chat_object.from_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 101 —Ä—É–±–ª—å.')
        else:
            send_keyboard(en_create_project_keyboard, chat_object.from_id, 'Enter cost, at 101 rub.')

    @staticmethod
    def send_project(chat_object, task):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_send_his_project(chat_object, task, ru_edit_project_keyboard)
        else:
            en_send_his_project(chat_object, task, en_edit_project_keyboard)

    @staticmethod
    def send_error_project_attach_file_incorrect(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, '–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –µ–≥–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.')
        else:
            en_error_message(chat_object, 'you must attach file or image like document.')

    @staticmethod
    def send_error_project_description_inccorect(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, '—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.')
        else:
            en_error_message(chat_object, 'to long description.')

    @staticmethod
    def send_enter_deadline_keyboard(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_create_project_keyboard, chat_object.from_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')
        else:
            send_keyboard(en_create_project_keyboard, chat_object.from_id, 'Enter deadline of project in format '
                                                                           'dd.mm.yyyy')

    @staticmethod
    def select_a_project_category(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_categories_of_projects, chat_object.from_id, '–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞')
        else:
            send_keyboard(en_categories_of_projects, chat_object.from_id, 'Select a project category')

    @staticmethod
    def send_error_project_name_incorrect(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, '—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è.')
        else:
            en_error_message(chat_object, 'to long name.')

    @staticmethod
    def send_error_project_deadline_incorrect(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, f'–≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. –î–ª—è –≤–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.\n–ü—Ä–∏–º–µ—Ä 21.01.2021')
        else:
            en_error_message(chat_object, f'incorrect date. Enter date in format dd.mm.yyyy.\nExample 21.01.2021')

    @staticmethod
    def send_error_category_incorrect(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_error_message(chat_object, '–Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.')
        else:
            en_error_message(chat_object, 'you must select category in buttons list.')

    @staticmethod
    def send_customer_keyboard(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_customer_choose_keyboard, chat_object.from_id, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: –ó–∞–∫–∞–∑—á–∏–∫.')
        else:
            send_keyboard(en_customer_choose_keyboard, chat_object.from_id, 'Current profile: Customer.')

    @staticmethod
    def send_main_keyboard(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            send_keyboard(ru_common_user_keyboard, chat_object.from_id, '–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å.')
        else:
            send_keyboard(en_common_user_keyboard, chat_object.from_id, 'Main panel.')

    @staticmethod
    def send_help_message(chat_object):
        if User.objects.filter(external_id=chat_object.from_id, current_lang="RU"):
            ru_send_help_message(chat_object)
        else:
            en_send_help_message(chat_object)

    @staticmethod
    def authenticate_user(chat_object):
        if chat_object.msg_text == 'üá¨üáß English':
            if User.objects.filter(external_id=chat_object.from_id).exists():
                user = User.objects.get(external_id=chat_object.from_id)
                user.current_lang = 'EN'
                user.save()
            else:
                User.objects.create_user(chat_object.from_id, 'EN', chat_object.username, 'user')
            en_greeting_message(chat_object)
        elif chat_object.msg_text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            if User.objects.filter(external_id=chat_object.from_id).exists():
                user = User.objects.get(external_id=chat_object.from_id)
                user.current_lang = 'RU'
                user.save()
            else:
                User.objects.create_user(chat_object.from_id, 'RU', chat_object.username, 'user')
            ru_greeting_message(chat_object)
